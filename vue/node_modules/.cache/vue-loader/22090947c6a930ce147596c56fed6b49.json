{"remainingRequest":"/home/centos/rails_v5.2.3/ChatC3/chat-c3/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/centos/rails_v5.2.3/ChatC3/chat-c3/src/components/Draw.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/centos/rails_v5.2.3/ChatC3/chat-c3/src/components/Draw.vue","mtime":1571733209776},{"path":"/home/centos/rails_v5.2.3/ChatC3/chat-c3/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/home/centos/rails_v5.2.3/ChatC3/chat-c3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/centos/rails_v5.2.3/ChatC3/chat-c3/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n//mixins: [show],\r\n  props: ['parentCol'],\r\n  data() {\r\n    return {\r\n      canvas: null,\r\n      ctx: null,\r\n      color: \"\",\r\n      prev: [],\r\n      drawing: false,\r\n      timeSinceLastSend: null,\r\n      messageChannel: null\r\n    }\r\n  },\r\n  mounted() {\r\n    this.canvas = document.getElementById(\"paper\")\r\n    this.ctx = this.canvas.getContext('2d')\r\n    this.color = '#' + (Math.random() * 0xFFFFFF << 0).toString(16)\r\n    this.timeSinceLastSend = new Date().getTime()\r\n  },\r\n  methods: {\r\n    start(e) {\r\n        e.preventDefault();\r\n        var x = e.pageX - this.canvas.offsetLeft - this.canvas.offsetParent.offsetLeft\r\n        var y = e.pageY - this.canvas.offsetTop - this.canvas.offsetParent.offsetTop\r\n        //if (e.originalEvent.changedTouches){\r\n        //  e = e.originalEvent.changedTouches[0]\r\n        //  x = e.pageX - this.canvas.offsetLeft - 2\r\n        //  y = e.pageY - this.canvas.offsetTop - 2\r\n        //}\r\n        this.drawing = true\r\n        this.prev.x = x\r\n        this.prev.y = y\r\n    },\r\n    leave(e) {\r\n      this.drawing = false\r\n    },\r\n    move(e){\r\n      if(this.drawing && new Date().getTime() - this.timeSinceLastSend > 10){\r\n        var x = e.pageX - this.canvas.offsetLeft - this.canvas.offsetParent.offsetLeft\r\n        var y = e.pageY - this.canvas.offsetTop - this.canvas.offsetParent.offsetTop\r\n        //if (e.originalEvent.changedTouches){\r\n        //  e = e.originalEvent.changedTouches[0]\r\n        //  x = e.pageX - this.canvas.offsetLeft - 2\r\n        //  y = e.pageY - this.canvas.offsetTop - 2\r\n        //}\r\n        this.$axios.post('http://192.168.56.102:3000/api/v1/updateline', {\r\n          data: {\r\n            fromx: this.prev.x,\r\n            fromy: this.prev.y,\r\n            tox: x,\r\n            toy: y,\r\n            color: this.color\r\n          }\r\n          //csrf_token: 'csrf_token here'\r\n        })\r\n        .then(response => {\r\n          //console.log(response)\r\n        })\r\n        .catch(error => {\r\n          //console.log(error)\r\n        });\r\n        this.timeSinceLastSend = new Date().getTime()\r\n      }\r\n      if(this.drawing && x && y){\r\n        this.drawLine(this.prev.x, this.prev.y, x, y, this.color)\r\n        this.prev.x = x\r\n        this.prev.y = y\r\n      }\r\n    },\r\n    drawLine(fromx, fromy, tox, toy, color){\r\n      this.ctx.beginPath()\r\n      this.ctx.strokeStyle = color\r\n      this.ctx.moveTo(fromx, fromy)\r\n      this.ctx.lineTo(tox, toy)\r\n      this.ctx.stroke()\r\n    },\r\n    canvasResize(col){\r\n      this.canvas.height = col.offsetHeight * 0.9;\r\n      this.canvas.width = col.offsetWidth * 0.9;\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["Draw.vue"],"names":[],"mappings":";;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Draw.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div>\r\n    <canvas id=\"paper\" width=\"400\" height=\"400\" style =\"border: 2px black solid\"\r\n      v-on:mousedown=\"start\" v-on:touchstart=\"start\" v-on:mouseup=\"leave\"\r\n      v-on:touchend=\"leave\" v-on:mousemove=\"move\" v-on:touchmove=\"move\">\r\n    </canvas>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n//mixins: [show],\r\n  props: ['parentCol'],\r\n  data() {\r\n    return {\r\n      canvas: null,\r\n      ctx: null,\r\n      color: \"\",\r\n      prev: [],\r\n      drawing: false,\r\n      timeSinceLastSend: null,\r\n      messageChannel: null\r\n    }\r\n  },\r\n  mounted() {\r\n    this.canvas = document.getElementById(\"paper\")\r\n    this.ctx = this.canvas.getContext('2d')\r\n    this.color = '#' + (Math.random() * 0xFFFFFF << 0).toString(16)\r\n    this.timeSinceLastSend = new Date().getTime()\r\n  },\r\n  methods: {\r\n    start(e) {\r\n        e.preventDefault();\r\n        var x = e.pageX - this.canvas.offsetLeft - this.canvas.offsetParent.offsetLeft\r\n        var y = e.pageY - this.canvas.offsetTop - this.canvas.offsetParent.offsetTop\r\n        //if (e.originalEvent.changedTouches){\r\n        //  e = e.originalEvent.changedTouches[0]\r\n        //  x = e.pageX - this.canvas.offsetLeft - 2\r\n        //  y = e.pageY - this.canvas.offsetTop - 2\r\n        //}\r\n        this.drawing = true\r\n        this.prev.x = x\r\n        this.prev.y = y\r\n    },\r\n    leave(e) {\r\n      this.drawing = false\r\n    },\r\n    move(e){\r\n      if(this.drawing && new Date().getTime() - this.timeSinceLastSend > 10){\r\n        var x = e.pageX - this.canvas.offsetLeft - this.canvas.offsetParent.offsetLeft\r\n        var y = e.pageY - this.canvas.offsetTop - this.canvas.offsetParent.offsetTop\r\n        //if (e.originalEvent.changedTouches){\r\n        //  e = e.originalEvent.changedTouches[0]\r\n        //  x = e.pageX - this.canvas.offsetLeft - 2\r\n        //  y = e.pageY - this.canvas.offsetTop - 2\r\n        //}\r\n        this.$axios.post('http://192.168.56.102:3000/api/v1/updateline', {\r\n          data: {\r\n            fromx: this.prev.x,\r\n            fromy: this.prev.y,\r\n            tox: x,\r\n            toy: y,\r\n            color: this.color\r\n          }\r\n          //csrf_token: 'csrf_token here'\r\n        })\r\n        .then(response => {\r\n          //console.log(response)\r\n        })\r\n        .catch(error => {\r\n          //console.log(error)\r\n        });\r\n        this.timeSinceLastSend = new Date().getTime()\r\n      }\r\n      if(this.drawing && x && y){\r\n        this.drawLine(this.prev.x, this.prev.y, x, y, this.color)\r\n        this.prev.x = x\r\n        this.prev.y = y\r\n      }\r\n    },\r\n    drawLine(fromx, fromy, tox, toy, color){\r\n      this.ctx.beginPath()\r\n      this.ctx.strokeStyle = color\r\n      this.ctx.moveTo(fromx, fromy)\r\n      this.ctx.lineTo(tox, toy)\r\n      this.ctx.stroke()\r\n    },\r\n    canvasResize(col){\r\n      this.canvas.height = col.offsetHeight * 0.9;\r\n      this.canvas.width = col.offsetWidth * 0.9;\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n#paper {\r\n  background: #FFFFFF;\r\n  display: block;\r\n}\r\n</style>\r\n"]}]}